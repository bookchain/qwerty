// const user = near.predecessorAccountId();
// const summaBig: bigint = near.attachedDeposit() as bigint;
// const summa = Number(utils.format.formatNearAmount(summaBig.toString()));
//-----------
// const tokensProgression = (summa) => {
//   let tokensBuy = 0;
//   let d = 1000 - this.totalTokens;
//   while (true) {
//     let kef = Math.ceil((d % 10 ? d : d + 1) / 10) || 1;
//     if (summa >= kef && this.totalTokens > 0) {
//       summa -= kef;
//       tokensBuy++;
//       this.totalTokens--;
//     } else break;
//   }
//   return tokensBuy;
// };
//-----------
// const tokensToBuy = tokensProgression(summa);
// var noUser = true;
// if (this.holders.toArray().length) {
//   this.holders.toArray().forEach((item, index) => {
//     if (item.user == user) {
//       item.tokens += summa;
//       this.holders.replace(index, item);
//       noUser = false;
//     }
//   });
// }
// if (noUser) {
//   this.holders.push({ user, tokens: summa });
// }
// const promise = near.promiseBatchCreate('bookjack.testnet');
// near.promiseBatchActionTransfer(promise, summaBig);

import { NearBindgen, near, call, view, Vector, NearPromise, initialize } from 'near-sdk-js';
import { POINT_ONE, PostedMessage, Tokens } from './model';
import { Near, utils } from 'near-api-js';

@NearBindgen({})
class GuestBook {
  messages: Vector<PostedMessage> = new Vector<PostedMessage>('v-uid');
  holders: Vector<Tokens> = new Vector<Tokens>('Tokens');
  // totalTokens: number = 1000;

  @call({ payableFunction: true })
  tokenSale() {
    const user = near.predecessorAccountId();
    const summaBig: bigint = near.attachedDeposit() as bigint;
    const summa = Number(utils.format.formatNearAmount(summaBig.toString()));
    //-----------
    // const tokensProgression = (summa) => {
    //   let tokensBuy = 0;
    //   let d = 1000 - this.totalTokens;
    //   while (true) {
    //     let kef = Math.ceil((d % 10 ? d : d + 1) / 10) || 1;
    //     if (summa >= kef && this.totalTokens > 0) {
    //       summa -= kef;
    //       tokensBuy++;
    //       this.totalTokens--;
    //     } else break;
    //   }
    //   return tokensBuy;
    // };
    //-----------
    // const tokensToBuy = tokensProgression(summa);
    var noUser = true;
    this.holders.toArray().forEach((item, index) => {
      if (item.user == user) {
        item.tokens += summa;
        this.holders.replace(index, item);
        noUser = false;
      }
    });
    if (noUser) {
      this.holders.push({ user, tokens: summa });
    }

    const promise = near.promiseBatchCreate('bookjack.testnet');
    near.promiseBatchActionTransfer(promise, summaBig);
  }
  @view({})
  getTokens(): Tokens[] {
    return this.holders.toArray();
  }
  // @view({})
  // getTotalTokens(): number {
  //   return this.totalTokens;
  // }

  @call({})
  addUserToken({ user, tokens }: { user: string; tokens: number }) {
    const f = { user, tokens };
    this.holders.push(f);
  }

  @call({ payableFunction: true })
  // Public - Adds a new message.
  add_message({
    user,
    hours,
    days,
    lastTime,
  }: {
    user: string;
    hours: number;
    days: number;
    lastTime: string;
  }) {
    let proverka = true;
    const sender = near.predecessorAccountId();
    this.messages.toArray().forEach((itemUser) => {
      if (itemUser.sender == sender && itemUser.readProcess == 'reading') {
        proverka = false;
      }
    });
    if (proverka) {
      const bet: bigint = near.attachedDeposit() as bigint;
      const readProcess = 'reading';
      const deadline = near.blockTimestamp() + BigInt(days * 86_400_000_000_000);
      const timer = BigInt(0);

      const message: PostedMessage = {
        sender,
        user,
        days,
        bet,
        hours,
        deadline,
        lastTime,
        readProcess,
        timer,
      };
      this.messages.push(message);
    }
  }

  @view({})
  getUser(user) {
    let res = {};
    if (this.messages.length) {
      this.messages.toArray().forEach((item, index) => {
        if (item.sender == user.user && item.readProcess == 'reading') {
          res = item;
        }
      });
    }
    return res;
  }

  @call({})
  timer() {
    const user = near.predecessorAccountId();
    const nowTime = near.blockTimestamp();
    this.messages.toArray().forEach((userItem, index) => {
      if (userItem.sender == user && userItem.readProcess == 'reading') {
        if (userItem.timer < BigInt(userItem.hours * 60_000_000_000)) {
          if (BigInt(userItem.lastTime) - nowTime > BigInt(-120_000_000_000)) {
            userItem.timer += nowTime - BigInt(userItem.lastTime);
            userItem.lastTime = nowTime.toString();
            this.messages.replace(index, userItem);
          } else {
            userItem.lastTime = nowTime.toString();
            this.messages.replace(index, userItem);
          }
        } else {
          userItem.readProcess = 'Win';
          userItem.lastTime = nowTime.toString();
          this.messages.replace(index, userItem);
          const promise = near.promiseBatchCreate(userItem.sender);
          near.promiseBatchActionTransfer(promise, userItem.bet);
        }
      }
    });
  }

  @call({})
  loseMoney() {
    const now = near.blockTimestamp();
    this.messages.toArray().forEach((userItem, index) => {
      if (userItem.deadline < now) {
        userItem.readProcess = 'fail';
        this.messages.replace(index, userItem);
        this.holders.toArray().forEach((item, index) => {
          const promise = near.promiseBatchCreate(item.user);
          near.promiseBatchActionTransfer(
            promise,
            (userItem.bet / BigInt(1000)) * BigInt(item.tokens),
          );
        });
        const promise = near.promiseBatchCreate('bookjack.testnet');
        near.promiseBatchActionTransfer(promise, (userItem.bet / BigInt(1000)) * BigInt(1));
      }
    });
  }

  @call({})
  clearState() {
    this.holders.clear();
  }

  // @view({})
  // balanceContract() {
  //   return near.accountBalance();
  // }
}
